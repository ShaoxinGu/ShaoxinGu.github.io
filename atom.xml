<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Philip&#39;s Blog</title>
  
  <subtitle>醉醉的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shaoxingu.github.io/"/>
  <updated>2019-10-11T02:35:33.097Z</updated>
  <id>https://shaoxingu.github.io/</id>
  
  <author>
    <name>Philip</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lua的面向对象</title>
    <link href="https://shaoxingu.github.io/2019/10/11/LuaOOP/"/>
    <id>https://shaoxingu.github.io/2019/10/11/LuaOOP/</id>
    <published>2019-10-11T02:35:33.097Z</published>
    <updated>2019-10-11T02:35:33.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Lua中并没有严格意义上的类和对象的概念，但是可以利用Lua的metatable来模拟类和对象。<br>Lua的作者在PIL中推荐了<a href="http://www.lua.org/pil/16.html" target="_blank" rel="noopener">一种实现LuaOO的方案</a>，这种方案很简单也很容易理解。<br>在lua里，类和实例都是table。在继承或实例化的时候，类会将自己设置为实例或子类的metatable。这样当实例或子类在索引不到某个属性或方法的时候，会调用metatable的__index元方法，也就是查找父类的方法。核心代码其实就这几行：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">class:new</span> <span class="params">(o)</span></span></span><br><span class="line">    o = o <span class="keyword">or</span> &#123;&#125;   <span class="comment">-- create object if user does not provide one</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(o, self)</span><br><span class="line">    self.<span class="built_in">__index</span> = self</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>具体的案例如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Base = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base:new</span> <span class="params">(o)</span></span></span><br><span class="line">    o = o <span class="keyword">or</span> &#123;&#125;   <span class="comment">-- create object if user does not provide one</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(o, self)</span><br><span class="line">    self.<span class="built_in">__index</span> = self</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base:Test1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Base Test1"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base:Test2</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Base Test2"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--Child既可以说是Base类的实例，也可以说是Base类的子类</span></span><br><span class="line">Child = Base:new()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child:Test1</span><span class="params">()</span></span> <span class="comment">--Child重写了Test1方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Child Test1"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> a = Base:new()    <span class="comment">--生成一个Base类的实例</span></span><br><span class="line">a:Test1()               <span class="comment">--将打印"Base Test1"</span></span><br><span class="line">a:Test2()               <span class="comment">--将打印"Base Test2"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> b = Child:new()   <span class="comment">--生成一个Child类的实例</span></span><br><span class="line">b:Test1()               <span class="comment">--将打印"Child Test1"</span></span><br><span class="line">b:Test2()               <span class="comment">--将打印"Base Test2",调用的是父类的方法</span></span><br></pre></td></tr></table></figure><p>可以看到，这里的类和实例都是table，并没有本质上的区别。这并不影响我们的初衷——代码复用，甚至提供了其他面向对象语言所没有的灵活性，比如你可以直接给实例定义新的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Lua中并没有严格意义上的类和对象的概念，但是可以利用Lua的metatable来模拟类和对象。&lt;br&gt;Lua的作者在PIL中推荐了&lt;a h
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://shaoxingu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Lua" scheme="https://shaoxingu.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>UnityShader笔记【一】</title>
    <link href="https://shaoxingu.github.io/2019/10/11/ShaderNote1/"/>
    <id>https://shaoxingu.github.io/2019/10/11/ShaderNote1/</id>
    <published>2019-10-11T02:35:33.097Z</published>
    <updated>2019-10-11T02:35:33.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用阶段"><a href="#应用阶段" class="headerlink" title="应用阶段"></a>应用阶段</h1><h2 id="把数据加载到显存中"><a href="#把数据加载到显存中" class="headerlink" title="把数据加载到显存中"></a>把数据加载到显存中</h2><ul><li><p>所有渲染所需的数据都需要从硬盘（Hard Disk Drive，HDD）中加载到系统内存（Random Access Memory，RAM）中。然后，网格和纹理等数据又被加载到显卡上的存储空间——显存（Video Random Access Memory， VRAM）中。这是因为，显卡对于显存的访问更快，而且大多数显卡对于RAM没有直接的访问权利。</p></li><li><p>渲染所需的数据除了纹理和网格之外，还包括顶点的位置信息、法线方向、顶点颜色、纹理坐标等。</p></li><li><p>当把数据加载到显存中后，RAM中的数据就可以移除了。但对于一些数据来说，CPU仍然需要访问它们（例如，我们希望CPU可以访问网格数据来进行碰撞检测），那么我们可能就不希望这些数据被移除，因为从硬盘加载到RAM的过程是十分耗时的。</p></li></ul><h2 id="设置渲染状态"><a href="#设置渲染状态" class="headerlink" title="设置渲染状态"></a>设置渲染状态</h2><ul><li>什么是渲染状态呢？一个通俗的解释就是，这些状态定义了场景中的网格是怎样被渲染的。例如，使用哪个顶点着色器（Vertex Shader）/片元着色器（Fragment Shader）、光源属性、材质等。如果我们没有更改渲染状态，那么所有的网格都将使用同一种渲染状态。</li></ul><h2 id="调用DrawCall"><a href="#调用DrawCall" class="headerlink" title="调用DrawCall"></a>调用DrawCall</h2><ul><li><p>DrawCall就是一个命令，它的发起方是CPU，接收方是GPU。这个命令仅仅会指向一个需要被渲染的图元（premitives）列表，而不会再包含任何材质信息。</p></li><li><p>当给定了一个DrawCall时，GPU就会根据渲染状态（例如材质、纹理、着色器等）和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的那些漂亮的像素。</p></li><li><p>DrawCall的调用次数会直接影响性能，应该尽量减少DrawCall调用次数。</p></li><li><p>另外，CPU和GPU是并行工作的，通过一个命令缓冲区（可以理解为队列）来实现，CPU向命令缓冲区中添加命令，GPU向命令缓冲区读取命令。</p></li></ul><h1 id="几何阶段"><a href="#几何阶段" class="headerlink" title="几何阶段"></a>几何阶段</h1><h2 id="顶点着色器（Vertex-Shader）"><a href="#顶点着色器（Vertex-Shader）" class="headerlink" title="顶点着色器（Vertex Shader）"></a>顶点着色器（Vertex Shader）</h2><ul><li><p>顶点着色器是完全可编程的，它通常用于实现顶点的空间变换、顶点着色等功能。</p></li><li><p>顶点着色器是流水线的第一个阶段，它的输入来自于CPU。顶点着色器的处理单位是顶点，也就是说，输入进来的每个顶点都会调用一次顶点着色器。顶点着色器本身不可以创建或者销毁任何顶点，而且无法得到顶点与顶点之间的关系。例如，我们无法得知两个顶点是否属于同一个三角网格。但正是因为这样的相互独立性，GPU可以利用本身的特征并行化处理每一个顶点，这意味着这一阶段的处理速度会很快。</p></li><li><p>顶点着色器需要完成的工作主要有：坐标变换和逐顶点光照。</p></li><li><p>坐标变换，顾名思义，就是对顶点的坐标（即位置）进行某种变换。顶点着色器可以在这一步中改变顶点的位置，这在顶点动画中是非常有用的。例如，我们可以通过改变顶点位置来模拟水面、布料等。但需要注意的是，无论我们在顶点着色器中怎样改变顶点的位置，一个最基本的顶点着色器必须完成的一个工作是，把顶点坐标从模型空间转换到齐次裁剪空间。</p></li><li><p><code>旧版Unity</code>使用<code>o.vertex = mul(UNITY_MVP, v.vertex);</code>来完成顶点变换，而<code>新版Unity</code>使用<code>o.vertex = UnityObjectToClipPos(v.vertex);</code>来实现顶点变换。其功能就是把顶点坐标转换到齐次裁剪坐标系下，接着通常再由硬件做透视除法后，最终得到归一化的设备坐标（Nomalized Device Coordinates, NDC)。</p></li><li><p>顶点着色器可以有不同的输出方式。最常见的输出路径是经光栅化后交给片元着色器进行处理。而在现代的Shader Model中，它还可以把数据发送给曲面细分着色器或几何着色器。</p></li></ul><h2 id="裁剪（Clipping）"><a href="#裁剪（Clipping）" class="headerlink" title="裁剪（Clipping）"></a>裁剪（Clipping）</h2><ul><li><p>由于我们的场景可能会很大，而摄像机的视野范围很有可能不会覆盖所有的场景物体，一个很自然的想法就是，那些不在摄像机视野范围内的物体不需要被处理。而裁剪就是为了完成这个目的而被提出来。</p></li><li><p>一个图元与摄像机视野的关系有3种：完全在视野内、部分在视野内、完全在视野外。完全在视野内的图元就继续传递给下一个流水线阶段，完全在视野外的图元不会继续向下传递，以为它们不需要被渲染。而那些部分在视野内的图元需要进行一个处理，这就是裁剪。例如，一条线段的一个顶点在视野内，而另一个顶点不在视野内，那么在视野外部的顶点应该使用一个新的顶点来代替，这个新的顶点位于这条线段和视野边界的交点处。</p></li><li><p>和顶点着色器不同，这一步是不可编程的，即我们无法通过编程来控制裁剪的过程，而是硬件上的固定操作，但我们可以自定义一个裁剪操作来对这一步进行配置。</p></li></ul><h2 id="屏幕映射（Screen-Mapping）"><a href="#屏幕映射（Screen-Mapping）" class="headerlink" title="屏幕映射（Screen Mapping）"></a>屏幕映射（Screen Mapping）</h2><ul><li><p>屏幕映射的任务是把每个图元的x和y坐标转换到屏幕坐标系（Screen Coordinates）下。屏幕坐标系是一个二维坐标系，它和我们用于显示画面的分辨率有很大关系。</p></li><li><p>屏幕坐标系和z坐标一起构成了一个坐标系，叫做窗口坐标系（Window Coordinates）。这些值会一起被传递到光栅化阶段。</p></li></ul><h1 id="光栅化阶段"><a href="#光栅化阶段" class="headerlink" title="光栅化阶段"></a>光栅化阶段</h1><h2 id="三角形设置"><a href="#三角形设置" class="headerlink" title="三角形设置"></a>三角形设置</h2><h2 id="三角形遍历"><a href="#三角形遍历" class="headerlink" title="三角形遍历"></a>三角形遍历</h2><h2 id="片元着色器"><a href="#片元着色器" class="headerlink" title="片元着色器"></a>片元着色器</h2><h2 id="逐片元操作"><a href="#逐片元操作" class="headerlink" title="逐片元操作"></a>逐片元操作</h2><h2 id="生成屏幕图像"><a href="#生成屏幕图像" class="headerlink" title="生成屏幕图像"></a>生成屏幕图像</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;应用阶段&quot;&gt;&lt;a href=&quot;#应用阶段&quot; class=&quot;headerlink&quot; title=&quot;应用阶段&quot;&gt;&lt;/a&gt;应用阶段&lt;/h1&gt;&lt;h2 id=&quot;把数据加载到显存中&quot;&gt;&lt;a href=&quot;#把数据加载到显存中&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://shaoxingu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Unity" scheme="https://shaoxingu.github.io/tags/Unity/"/>
    
      <category term="Shader" scheme="https://shaoxingu.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://shaoxingu.github.io/2019/10/11/hello-world/"/>
    <id>https://shaoxingu.github.io/2019/10/11/hello-world/</id>
    <published>2019-10-11T02:35:33.097Z</published>
    <updated>2019-10-11T02:35:33.097Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
