<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Philip&#39;s Blog</title>
  
  <subtitle>不会美术的策划不是好程序。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shaoxingu.github.io/"/>
  <updated>2019-10-12T08:28:34.052Z</updated>
  <id>https://shaoxingu.github.io/</id>
  
  <author>
    <name>Philip</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lua实现面向对象</title>
    <link href="https://shaoxingu.github.io/2019/10/12/LuaOOP/"/>
    <id>https://shaoxingu.github.io/2019/10/12/LuaOOP/</id>
    <published>2019-10-12T08:28:34.052Z</published>
    <updated>2019-10-12T08:28:34.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>以下描述出自《Program in Lua》中文版：</p><blockquote><p>​        一些面向对象的语言中提供了类的概念，作为创建对象的模板。在这些语言里，对象是类的实例。Lua 不存在类的概念，每个对象定义他自己的行为并拥有自己的形状（shape）。然而，依据基于原型（prototype）的语言比如 Self 和 NewtonScript，在 Lua中仿效类的概念并不难。在这些语言中，对象没有类。相反，每个对象都有一个 prototype（原型），当调用不属于对象的某些操作时，会最先会到 prototype 中查找这些操作。在这类语言中实现类（class）的机制，我们创建一个对象，作为其它对象的原型即可（原型对象为类，其它对象为类的 instance）。类与 prototype 的工作机制相同，都是定义了特定对象的行为。</p></blockquote><h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>Lua的作者之一<a href="https://en.wikipedia.org/wiki/Roberto_Ierusalimschy" target="_blank" rel="noopener">Roberto Lerusalimschy</a>在《Program in Lua》书中推荐了<a href="http://www.lua.org/pil/16.html" target="_blank" rel="noopener">一种实现LuaOO的方案</a>，这种方案很简单也很容易理解。</p><p>在Lua里，类和实例都是table。在继承或实例化的时候，类会被赋值给实例或子类metatable的__index。</p><p>核心代码其实就这几行：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:new</span> <span class="params">(o)</span></span></span><br><span class="line">    o = o <span class="keyword">or</span> &#123;&#125;   <span class="comment">-- create object if user does not provide one</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(o, self)</span><br><span class="line">    self.<span class="built_in">__index</span> = self</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>具体的案例如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Base = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base:new</span> <span class="params">(o)</span></span></span><br><span class="line">    o = o <span class="keyword">or</span> &#123;&#125;   <span class="comment">-- create object if user does not provide one</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(o, self)</span><br><span class="line">    self.<span class="built_in">__index</span> = self</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base:Test1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Base Test1"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base:Test2</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Base Test2"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--Child既可以说是Base类的实例，也可以说是Base类的子类，因为它们本质上都是table对象</span></span><br><span class="line">Child = Base:new()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child:Test1</span><span class="params">()</span></span> <span class="comment">--Child类重写了Test1方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Child Test1"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> a = Base:new()    <span class="comment">--生成一个Base类的实例</span></span><br><span class="line">a:Test1()               <span class="comment">--将打印"Base Test1"</span></span><br><span class="line">a:Test2()               <span class="comment">--将打印"Base Test2"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> b = Child:new()   <span class="comment">--生成一个Child类的实例</span></span><br><span class="line">b:Test1()               <span class="comment">--将打印"Child Test1"</span></span><br><span class="line">b:Test2()               <span class="comment">--将打印"Base Test2",调用的是父类的方法</span></span><br></pre></td></tr></table></figure><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>这个方案是我在工作中接触到的，算是方案一的升级版。</p><p>核心代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 所有类都会继承自这个类，真·基类</span></span><br><span class="line">Class = &#123;__ClassType = <span class="string">"Class"</span>&#125;</span><br><span class="line">ALL_CLASS = ALL_CLASS <span class="keyword">or</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:Inherit</span><span class="params">(ClassName, o)</span></span></span><br><span class="line">    o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">    o.mt = &#123; <span class="built_in">__index</span> = o&#125;</span><br><span class="line">    <span class="built_in">assert</span>(ClassName, <span class="string">"必须要有类名"</span>)</span><br><span class="line">    <span class="built_in">assert</span>(<span class="keyword">not</span> (ClassName <span class="keyword">and</span> ALL_CLASS[ClassName]), <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"该类已存在： %s"</span>, ClassName))</span><br><span class="line"></span><br><span class="line">    o.__ClassType = ClassName</span><br><span class="line">    ALL_CLASS[ClassName] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    o.__InheritMap = &#123;[self:GetType()] = <span class="literal">true</span> &#125;  <span class="comment">-- 记录继承类型</span></span><br><span class="line">    o.__InheritSelf = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> self.__InheritMap <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> UpType, _ <span class="keyword">in</span> <span class="built_in">pairs</span>(self.__InheritMap) <span class="keyword">do</span></span><br><span class="line">            o.__InheritMap[UpType] = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">setmetatable</span>(o, &#123;<span class="built_in">__index</span> = self&#125;)</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:IsSubObj</span><span class="params">(ObjType)</span></span></span><br><span class="line">    <span class="keyword">return</span> self:GetTypeMap()[ObjType]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:GetTypeMap</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> clsSelf = <span class="built_in">getmetatable</span>(self)</span><br><span class="line">    <span class="keyword">if</span> clsSelf <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> Temp = clsSelf.<span class="built_in">__index</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Temp.__InheritSelf <span class="keyword">then</span></span><br><span class="line">            Temp.__InheritMap[Temp:GetType()] = <span class="literal">true</span></span><br><span class="line">            Temp.__InheritSelf = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> Temp.__InheritMap</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:New</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> o = &#123;&#125;</span><br><span class="line">    <span class="built_in">setmetatable</span>(o, &#123;<span class="built_in">__index</span> = self&#125;)</span><br><span class="line">    <span class="keyword">if</span> o.Ctor <span class="keyword">then</span> o:Ctor(...) <span class="keyword">end</span> <span class="comment">--调用构造函数</span></span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:Ctor</span><span class="params">()</span></span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:InClass</span><span class="params">()</span></span> <span class="keyword">return</span> <span class="literal">true</span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:OnCreate</span><span class="params">()</span></span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:OnDestroy</span><span class="params">()</span></span> <span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class:GetType</span><span class="params">()</span></span><span class="keyword">return</span> self.__ClassType <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--获取一个class的父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span><span class="params">(Class)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getmetatable</span>(Class).<span class="built_in">__index</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--判断一个类是否是类的子类 &amp; 判断一个对象否是另一个类的实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsSub</span><span class="params">(Obj, Base)</span></span></span><br><span class="line">    <span class="keyword">local</span> Temp = Obj</span><br><span class="line">    <span class="keyword">while</span>  <span class="number">1</span> <span class="keyword">do</span>     <span class="comment">--循环回溯metatable</span></span><br><span class="line">        <span class="keyword">local</span> mt = <span class="built_in">getmetatable</span>(Temp)</span><br><span class="line">        <span class="keyword">if</span> mt <span class="keyword">then</span></span><br><span class="line">            Temp = mt.<span class="built_in">__index</span></span><br><span class="line">            <span class="keyword">if</span> Temp == Base <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Base = Base <span class="keyword">or</span> Class:Inherit(<span class="string">"Base"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base:Test1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Base Test1"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base:Test2</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Base Test2"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Child = Child <span class="keyword">or</span> Base:Inherit(<span class="string">"Child"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child:Test1</span><span class="params">()</span></span>  <span class="comment">--Child类重写了Test1方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Child Test1"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> a = Base:new()    <span class="comment">--生成一个Base类的实例</span></span><br><span class="line">a:Test1()               <span class="comment">--将打印"Base Test1"</span></span><br><span class="line">a:Test2()               <span class="comment">--将打印"Base Test2"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> b = Child:new()   <span class="comment">--生成一个Child类的实例</span></span><br><span class="line">b:Test1()               <span class="comment">--将打印"Child Test1"</span></span><br><span class="line">b:Test2()               <span class="comment">--将打印"Base Test2",调用的是父类的方法</span></span><br></pre></td></tr></table></figure><h2 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h2><p>这个是云风提供的方案：<a href="https://blog.codingnow.com/cloud/LuaOO" target="_blank" rel="noopener">博客地址</a>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> _class=&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">class</span><span class="params">(super)</span></span></span><br><span class="line"><span class="keyword">local</span> class_type=&#123;&#125;</span><br><span class="line">class_type.ctor=<span class="literal">false</span></span><br><span class="line">class_type.super=super</span><br><span class="line">class_type.new=<span class="function"><span class="keyword">function</span><span class="params">(...)</span></span> </span><br><span class="line"><span class="keyword">local</span> obj=&#123;&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">create</span></span><br><span class="line"><span class="built_in">create</span> = <span class="function"><span class="keyword">function</span><span class="params">(c,...)</span></span></span><br><span class="line"><span class="keyword">if</span> c.super <span class="keyword">then</span></span><br><span class="line"><span class="built_in">create</span>(c.super,...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> c.ctor <span class="keyword">then</span></span><br><span class="line">c.ctor(obj,...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">create</span>(class_type,...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">setmetatable</span>(obj,&#123; <span class="built_in">__index</span>=_class[class_type] &#125;)</span><br><span class="line"><span class="keyword">return</span> obj</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> vtbl=&#123;&#125;</span><br><span class="line">_class[class_type]=vtbl</span><br><span class="line"> </span><br><span class="line"><span class="built_in">setmetatable</span>(class_type,&#123;<span class="built_in">__newindex</span>=</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(t,k,v)</span></span></span><br><span class="line">vtbl[k]=v</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> super <span class="keyword">then</span></span><br><span class="line"><span class="built_in">setmetatable</span>(vtbl,&#123;<span class="built_in">__index</span>=</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(t,k)</span></span></span><br><span class="line"><span class="keyword">local</span> ret=_class[super][k]</span><br><span class="line">vtbl[k]=ret</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> class_type</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>创建基类：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">base_type=class()<span class="comment">-- 定义一个基类 base_type</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base_type:ctor</span><span class="params">(x)</span></span><span class="comment">-- 定义 base_type 的构造函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"base_type ctor"</span>)</span><br><span class="line">self.x=x</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base_type:print_x</span><span class="params">()</span></span><span class="comment">-- 定义一个成员函数 base_type:print_x</span></span><br><span class="line"><span class="built_in">print</span>(self.x)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base_type:hello</span><span class="params">()</span></span><span class="comment">-- 定义另一个成员函数 base_type:hello</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"hello base_type"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>创建子类：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test=class(base_type)<span class="comment">-- 定义一个类 test 继承于 base_type</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test:ctor</span><span class="params">()</span></span><span class="comment">-- 定义 test 的构造函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"test ctor"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test:hello</span><span class="params">()</span></span><span class="comment">-- 重载 base_type:hello 为 test:hello</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"hello test"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=test.new(<span class="number">1</span>)<span class="comment">-- 输出两行，base_type ctor 和 test ctor 。这个对象被正确的构造了。</span></span><br><span class="line">a:print_x()<span class="comment">-- 输出 1 ，这个是基类 base_type 中的成员函数。</span></span><br><span class="line">a:hello()<span class="comment">-- 输出 hello test ，这个函数被重载了。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;以下描述出自《Program in Lua》中文版：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​        一些面向对象的语言中提供了类
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://shaoxingu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Lua" scheme="https://shaoxingu.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>UnityShader笔记【一】</title>
    <link href="https://shaoxingu.github.io/2019/10/12/ShaderNote1/"/>
    <id>https://shaoxingu.github.io/2019/10/12/ShaderNote1/</id>
    <published>2019-10-12T08:28:34.052Z</published>
    <updated>2019-10-12T08:28:34.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用阶段"><a href="#应用阶段" class="headerlink" title="应用阶段"></a>应用阶段</h1><h2 id="把数据加载到显存中"><a href="#把数据加载到显存中" class="headerlink" title="把数据加载到显存中"></a>把数据加载到显存中</h2><ul><li><p>所有渲染所需的数据都需要从硬盘（Hard Disk Drive，HDD）中加载到系统内存（Random Access Memory，RAM）中。然后，网格和纹理等数据又被加载到显卡上的存储空间——显存（Video Random Access Memory， VRAM）中。这是因为，显卡对于显存的访问更快，而且大多数显卡对于RAM没有直接的访问权利。</p></li><li><p>渲染所需的数据除了纹理和网格之外，还包括顶点的位置信息、法线方向、顶点颜色、纹理坐标等。</p></li><li><p>当把数据加载到显存中后，RAM中的数据就可以移除了。但对于一些数据来说，CPU仍然需要访问它们（例如，我们希望CPU可以访问网格数据来进行碰撞检测），那么我们可能就不希望这些数据被移除，因为从硬盘加载到RAM的过程是十分耗时的。</p></li></ul><h2 id="设置渲染状态"><a href="#设置渲染状态" class="headerlink" title="设置渲染状态"></a>设置渲染状态</h2><ul><li>什么是渲染状态呢？一个通俗的解释就是，这些状态定义了场景中的网格是怎样被渲染的。例如，使用哪个顶点着色器（Vertex Shader）/片元着色器（Fragment Shader）、光源属性、材质等。如果我们没有更改渲染状态，那么所有的网格都将使用同一种渲染状态。</li></ul><h2 id="调用DrawCall"><a href="#调用DrawCall" class="headerlink" title="调用DrawCall"></a>调用DrawCall</h2><ul><li><p>DrawCall就是一个命令，它的发起方是CPU，接收方是GPU。这个命令仅仅会指向一个需要被渲染的图元（premitives）列表，而不会再包含任何材质信息。</p></li><li><p>当给定了一个DrawCall时，GPU就会根据渲染状态（例如材质、纹理、着色器等）和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的那些漂亮的像素。</p></li><li><p>DrawCall的调用次数会直接影响性能，应该尽量减少DrawCall调用次数。</p></li><li><p>另外，CPU和GPU是并行工作的，通过一个命令缓冲区（可以理解为队列）来实现，CPU向命令缓冲区中添加命令，GPU向命令缓冲区读取命令。</p></li></ul><h1 id="几何阶段"><a href="#几何阶段" class="headerlink" title="几何阶段"></a>几何阶段</h1><blockquote><p>在这个阶段，顶点将经历以下几个阶段：</p><p><strong>模型坐标系</strong> -&gt; 模型变换 -&gt; <strong>世界坐标系</strong>  -&gt; 视图变换 -&gt; <strong>观察坐标系</strong> -&gt; 投影变换 -&gt; <strong>规范化的观察空间</strong> -&gt; 屏幕映射 -&gt; <strong>屏幕坐标系</strong></p></blockquote><h2 id="顶点着色器（Vertex-Shader）"><a href="#顶点着色器（Vertex-Shader）" class="headerlink" title="顶点着色器（Vertex Shader）"></a>顶点着色器（Vertex Shader）</h2><ul><li>顶点着色器是完全可编程的，它通常用于实现顶点的空间变换、顶点着色等功能。</li><li>顶点着色器是流水线的第一个阶段，它的输入来自于CPU。顶点着色器的处理单位是顶点，也就是说，输入进来的每个顶点都会调用一次顶点着色器。顶点着色器本身不可以创建或者销毁任何顶点，而且无法得到顶点与顶点之间的关系。例如，我们无法得知两个顶点是否属于同一个三角网格。但正是因为这样的相互独立性，GPU可以利用本身的特征并行化处理每一个顶点，这意味着这一阶段的处理速度会很快。</li><li>顶点着色器需要完成的工作主要有：坐标变换和逐顶点光照。</li><li>坐标变换，顾名思义，就是对顶点的坐标（即位置）进行某种变换。顶点着色器可以在这一步中改变顶点的位置，这在顶点动画中是非常有用的。例如，我们可以通过改变顶点位置来模拟水面、布料等。但需要注意的是，无论我们在顶点着色器中怎样改变顶点的位置，一个最基本的顶点着色器必须完成的一个工作是，把顶点坐标从模型空间转换到齐次裁剪空间。</li><li><code>旧版Unity</code>使用<code>o.vertex = mul(UNITY_MVP, v.vertex);</code>来完成顶点变换，而<code>新版Unity</code>使用<code>o.vertex = UnityObjectToClipPos(v.vertex);</code>来实现顶点变换。其功能就是把顶点坐标转换到齐次裁剪坐标系下，接着通常再由硬件做透视除法后，最终得到归一化的设备坐标（Nomalized Device Coordinates, NDC)。</li><li>顶点着色器可以有不同的输出方式。最常见的输出路径是经光栅化后交给片元着色器进行处理。而在现代的Shader Model中，它还可以把数据发送给曲面细分着色器或几何着色器。</li></ul><h2 id="几何-曲面细分着色器"><a href="#几何-曲面细分着色器" class="headerlink" title="几何/曲面细分着色器"></a>几何/曲面细分着色器</h2><ul><li>几何/曲面细分着色器是一个可选的操作，它的输入是顶点数据。它可以对图元的顶点进行操作，它可以高效地创建和删除几何图元。也可以通过增加顶点，让现有的多边形网格更加逼近曲面，也就是所谓的曲面细分。</li></ul><h2 id="裁剪（Clipping）"><a href="#裁剪（Clipping）" class="headerlink" title="裁剪（Clipping）"></a>裁剪（Clipping）</h2><ul><li><p>由于我们的场景可能会很大，而摄像机的视野范围很有可能不会覆盖所有的场景物体，一个很自然的想法就是，那些不在摄像机视野范围内的物体不需要被处理。而裁剪就是为了完成这个目的而被提出来。</p></li><li><p>一个图元与摄像机视野的关系有3种：完全在视野内、部分在视野内、完全在视野外。完全在视野内的图元就继续传递给下一个流水线阶段，完全在视野外的图元不会继续向下传递，以为它们不需要被渲染。而那些部分在视野内的图元需要进行一个处理，这就是裁剪。例如，一条线段的一个顶点在视野内，而另一个顶点不在视野内，那么在视野外部的顶点应该使用一个新的顶点来代替，这个新的顶点位于这条线段和视野边界的交点处。</p></li><li><p>和顶点着色器不同，这一步是不可编程的，即我们无法通过编程来控制裁剪的过程，而是硬件上的固定操作，但我们可以自定义一个裁剪操作来对这一步进行配置。</p></li></ul><h2 id="屏幕映射（Screen-Mapping）"><a href="#屏幕映射（Screen-Mapping）" class="headerlink" title="屏幕映射（Screen Mapping）"></a>屏幕映射（Screen Mapping）</h2><ul><li><p>屏幕映射的任务是把每个图元的x和y坐标转换到屏幕坐标系（Screen Coordinates）下。屏幕坐标系是一个二维坐标系，它和我们用于显示画面的分辨率有很大关系。</p></li><li><p>屏幕坐标系和z坐标一起构成了一个坐标系，叫做窗口坐标系（Window Coordinates）。这些值会一起被传递到光栅化阶段。</p></li></ul><h1 id="光栅化阶段"><a href="#光栅化阶段" class="headerlink" title="光栅化阶段"></a>光栅化阶段</h1><h2 id="三角形设置（Triangle-Setup）"><a href="#三角形设置（Triangle-Setup）" class="headerlink" title="三角形设置（Triangle Setup）"></a>三角形设置（Triangle Setup）</h2><ul><li>将几何阶段传过来的顶点数据进行处理，将顶点连成三角网格。</li></ul><h2 id="三角形遍历（Triangle-Traversal）"><a href="#三角形遍历（Triangle-Traversal）" class="headerlink" title="三角形遍历（Triangle Traversal）"></a>三角形遍历（Triangle Traversal）</h2><ul><li>三角形遍历的输入就是三角形设置的结果。</li><li>根据顶点信息，计算得到覆盖三角网格的像素位置，对于的这些像素就生成一个片元（fragment）。</li><li>而片元中每个像素的状态都是对三个顶点的信息进行插值得到的。</li></ul><h2 id="片元着色器（Fragment-Shader）"><a href="#片元着色器（Fragment-Shader）" class="headerlink" title="片元着色器（Fragment Shader）"></a>片元着色器（Fragment Shader）</h2><ul><li>这是一个可编程的阶段</li><li>根据之前的片元信息，计算每个片元的颜色值。</li><li>这个阶段可以完成很多重要的渲染技术，比如纹理贴图。</li></ul><h2 id="逐片元操作（Per-Fragment-Operations）"><a href="#逐片元操作（Per-Fragment-Operations）" class="headerlink" title="逐片元操作（Per-Fragment Operations）"></a>逐片元操作（Per-Fragment Operations）</h2><ul><li>在DirectX中又叫做输出合并阶段（Output-Merger）。</li><li>这里将每个片元的深度和颜色与帧缓存结合在一起。每个像素的颜色都是混合的结果。</li></ul><h2 id="生成屏幕图像"><a href="#生成屏幕图像" class="headerlink" title="生成屏幕图像"></a>生成屏幕图像</h2><ul><li>显示图像！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;应用阶段&quot;&gt;&lt;a href=&quot;#应用阶段&quot; class=&quot;headerlink&quot; title=&quot;应用阶段&quot;&gt;&lt;/a&gt;应用阶段&lt;/h1&gt;&lt;h2 id=&quot;把数据加载到显存中&quot;&gt;&lt;a href=&quot;#把数据加载到显存中&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://shaoxingu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Unity" scheme="https://shaoxingu.github.io/tags/Unity/"/>
    
      <category term="Shader" scheme="https://shaoxingu.github.io/tags/Shader/"/>
    
  </entry>
  
</feed>
